
public class Main {

	public Main() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
String infix = "(3*(3*3/8)*(1+4+1*(3-1)+1+1)-(((4+1-2)/4+2)))";
 infix = "30+20*50";
 System.out.println(format(infix));

String post = infixToPostfix(infix) ;
System.out.println(post);
System.out.println("\n"+post.equals("3491-*9*+"));
System.out.println(evaluation(post));
// 25+54+4*83+-*31/874*+-/
	}
	
	static String infixToPostfix (String e ) {
		   Stack stack = new Stack () ;
          String output = "" ;
     
          for (int i = 0 ; i < e.length() ; i++) {
        	 
        	  if (Character.isDigit(e.charAt(i))) {
        		  output+= e.charAt(i) ;
        	  }
        	  else if (e.charAt(i) == '(')  {
        		  stack.push(e.charAt(i));
        	  }
        	  else if (e.charAt(i) == ')') {
        		  while ((char)stack.getTop() != '(') {
        			  output += stack.getTop() ;
        			  stack.pop() ;
        		  }
        		  stack.pop() ;
        	  }
        	  else {
        		  while (!stack.isEmpty() && MaxPriority(e.charAt(i), (char)stack.getTop()) == false) {
             		 System.out.println(e.charAt(i) +"" + (stack.getTop()) +"   -->" + MaxPriority(e.charAt(i), (char)stack.getTop()));
            			  output += stack.getTop() ;
            			  stack.pop() ;
            		  
        		  }
        		 stack.push(e.charAt(i)) ;
        	  }
          }
          while (!stack.isEmpty()) {
        	  output += stack.getTop() ;
        	  stack.pop() ;
          }
		return output ;
	}
	static boolean MaxPriority (char New , char topStack ) {
		if ((New == '/' || New == '*' )&&(topStack  == '/' || topStack == '*' )) {
			return false  ;
		}
		else if ((New == '/' || New == '*' ||New == '%'  )&& (topStack  == '+' || topStack == '-' )) {
			return true  ;
		}else if ((New == '+' || New == '-' )&& (topStack  == '/' || topStack == '*' ||topStack == '%' ) ) {
			return false  ;
		}
		else if ((New == '+' || New == '-' || New  == '*' || New == '/' ||New == '%') && topStack == '(') {
			 
			return true ;
		}
		else {
			return false ;

		}
		
	}
	static double evaluation (String s ) {
		Stack stack = new Stack () ;
		for (int i = 0 ;i < s.length() ; i++) {
			if (Character.isDigit(s.charAt(i))) {
				stack.push(s.charAt(i));
			}
			else {
				double second = Double.parseDouble(stack.getTop()+"");				
						stack.pop();
			    double first = Double.parseDouble(stack.getTop()+"");	
				stack.pop();

			   switch (s.charAt(i)) {
			   case '+' : 				stack.push(first + second);
			   break ;
			   case '-' : 				stack.push(first - second);
			   break ;
			   case '/' : 				stack.push(first / second);
			   break ;
			   case '*' : 				stack.push(first * second);
			   				break ;
			   case '%' : 				stack.push(first % second);
  				break ;
				   }
			}
		}
		return Double.parseDouble(stack.getTop()+"") ;
	}
	static String format(String s ) {
		String out = "" ;
		for (int i = 0 ; i < s.length() ; i++) {
          if (Character.isDigit(s.charAt(i))) {
        	  out+= s.charAt(i);
          }
          else if (s.charAt(i) == '.') {
        	  out+= s.charAt(i);
          }
          else  {
        	  out+= "#"+s.charAt(i) ;

          }
		}
		return out ;
	}

}
